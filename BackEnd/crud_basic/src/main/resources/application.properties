spring.application.name=crud_basic

spring.datasource.url=jdbc:mysql://localhost:3306/restaurant?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

server.port=8080
server.error.include-message=always
server.error.include-binding-errors=always

app.jwtSecret=CL4V3_5UP3R_S3CR3T4_P4R4_JWT_R35T4UR4NT_M4N4G3M3NT_5Y5T3M_S3N4_PR0J3CT_2025_1234567890123456
app.jwtExpirationMs=600000

google.recaptcha.secret=6Lcy8x4rAAAAAEfLaxWtCL-QrGv_9PFVYU0q_3oR
google.recaptcha.score-threshold=0.5

spring.security.user.name=admin
spring.security.user.password=admin

server.servlet.session.cookie.secure=false
server.servlet.session.cookie.http-only=true
server.servlet.session.cookie.same-site=lax

logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.security.oauth2=DEBUG
logging.level.com.sena.crud_basic=DEBUG

spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# ===========================
# Configuración Google OAuth2 Client (registro de la app en Google)
# ===========================

# Identificador único de cliente asignado por Google al registrar la app.
spring.security.oauth2.client.registration.google.client-id=1447627439-43dd2760v4irfgkl7l83pj5ei7u8fgl2.apps.googleusercontent.com

# Secreto privado de cliente, usado para autenticar la app con Google.
spring.security.oauth2.client.registration.google.client-secret=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

# Alcances o permisos solicitados: email y perfil básico del usuario.
spring.security.oauth2.client.registration.google.scope=email,profile

# Tipo de flujo OAuth2: authorization_code es el más seguro para aplicaciones web.
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code

# URL de redirección donde Google devolverá el código de autorización tras login exitoso.
# Debe coincidir exactamente con los URIs autorizados en la consola Google Cloud.
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google

# ===========================
# Proveedores OAuth2 de Google
# ===========================

# URL para iniciar la autorización, donde el usuario se autentica en Google.
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth

# URL para intercambiar el código por tokens de acceso y refresco.
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token

# URL para obtener la información del usuario con el token de acceso.
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo

# Atributo que se usará como identificador único del usuario Google (sub = id único).
spring.security.oauth2.client.provider.google.user-name-attribute=sub

# ===========================
# URIs permitidos para redirecciones luego de login OAuth2
# ===========================
# Estos deben estar configurados en Google Cloud Console como "Authorized redirect URIs".
app.oauth2.authorizedRedirectUris=http://localhost:5501,http://127.0.0.1:5501,http://localhost:8080
